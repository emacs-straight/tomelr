# configuration file for git-cliff (0.1.0)
# https://github.com/orhun/git-cliff
# Run 'make changelog' to update <repo>/CHANGELOG.org.

[changelog]
  # changelog header
  header = """
# This file is auto-generated by running 'make changelog' from the repo root.

* Changelog\n
All notable changes to this project will be documented in this file.\n
"""

  # template for the changelog body
  # https://tera.netlify.app/docs/#introduction
  body = """
{% if version %}\
    ** *{{ version | trim_start_matches(pat="v") }}* - <{{ timestamp | date(format="%Y-%m-%dT%H:%M:%S%.3fZ") | date(timezone="America/New_York") }}>
{% else %}\
    ** :fire: *unreleased*
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        [[https://github.com/kaushalmodi/tomelr/compare/{{ previous.commit_id }}...{{ commit_id }}]\
         [{{ previous.commit_id | truncate(length=7, end="") }}...{{ commit_id | truncate(length=7, end="") }}]]
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {% set group_minus_html = group | striptags -%}
    {% set group_array = group_minus_html | split(pat=":") -%}
    {# If group_minus_html = ":memo: Documentation", split that by : so that you
       get an array: ["", "memo", "Documentation"], and then use the element
       from index 2 to derive the CUSTOM_ID.
    -#}
    ***{{ group_minus_html }}
    :PROPERTIES:
    :CUSTOM_ID: {{ group_array.2 | slugify }}{% if version %}-{{ version }}{% endif %}
    :END:
    {% for commit in commits %}
        - {{ commit.message
             | trim_end
             | truncate(length=200)
             | upper_first }} ([[https://github.com/kaushalmodi/tomelr/commit/{{ commit.id }}][{{ commit.id | truncate(length=7, end="") }}]])\
    {% endfor %}
{% endfor %}\n
"""

  # remove the leading and trailing whitespace from the template
  trim = true

  # changelog footer
  footer = """
# This file is generated by git-cliff by running 'make changelog' from the repo root.
"""

[git]
  # parse the commits based on https://www.conventionalcommits.org
  conventional_commits = true
  # filter out the commits that are not conventional
  filter_unconventional = false

  # preprocess the git log messages before git-cliff parses them.
  # https://github.com/orhun/git-cliff/issues/77#issuecomment-1090234236
  commit_preprocessors = [
    { pattern = " *\\n* *$", replace = ""}, # Remove trailing spaces and newlines.
    { pattern = "\\n+", replace = " … "}, # Replace consecutive newlines with " … ".
    { pattern = "  +", replace = " "}, # Replace multiple spaces with a single space.
    { pattern = "\\[\\[", replace = "[​["}, # Break Org-link-like syntax in commit messages by injecting zero-width-space (ZWS) between "[[".
    { pattern = "file:", replace = "file​:"}, # Break Org-file-link-like syntax in commit messages by injecting ZWS between "file" and ":".
    { pattern = "https://github.com/kaushalmodi/tomelr/issues/([0-9]+)(#issuecomment-[0-9]+)*", replace = "Issue # [[${0}][${1}]]"}, # Turn issue links for this repo into Org links with desc.
    { pattern = "https://github.com/kaushalmodi/tomelr/pull/([0-9]+)", replace = "PR # [[${0}][${1}]]"}, # Turn PR links for this repo into Org links with desc.
    { pattern = "([^\\[])(https://github.com/([^ ]+)/(issues|pull)/([0-9]+)(#issuecomment-[0-9]+)*)", replace = "${1}[[${2}][${3} #${5}]]"}, # Turn external issue links into Org links with desc.
    { pattern = "Merge pull request #([0-9]+) from [^ ]+", replace = "PR # [[https://github.com/kaushalmodi/tomelr/pull/${1}][${1}]]:"}, # Turn PR references into links.
    { pattern = "https://github.com/kaushalmodi/tomelr/commit/([a-f0-9]{7})[a-f0-9]*", replace = "commit # [[${0}][${1}]]"}, # Hyperlink commit references.
    { pattern = "([ \\n])(([a-f0-9]{7})[a-f0-9]*)", replace = "${1}commit # [[https://github.com/kaushalmodi/tomelr/commit/${2}][${3}]]"}, # Hyperlink commit references.
    { pattern = "[*_+=~]", replace = "${0}​​"}, # Break more valid Org markup by injecting ZWS that shows up in git logs.
    ]

  # regex for parsing and grouping commits
  commit_parsers = [
      { message = "\\[skip ci\\]", skip = true},
      { message = "empty commit", skip = true},

      # https://www.conventionalcommits.org/en/v1.0.0/#summary
      { message = "^[^ ]+!:"                               , group = "<!-- 0 --> :boom: Breaking"},
      { message = "^feat"                                  , group = "<!-- 1.0 --> :sparkles: Features"},
      { message = "^perf"                                  , group = "<!-- 2 --> :zap: Performance"},
      { message = "^fix"                                   , group = "<!-- 3 --> :bug: Bug Fixes"},
      { message = "^docs?"                                 , group = "<!-- 4.0 --> :memo: Documentation"},
      { message = "^refactor"                              , group = "<!-- 5 --> :recycle: Refactor"},
      { message = "^test"                                  , group = "<!-- 6 --> :hammer: Testing"},
      { message = "^(chore.*|ci:)", skip = true},
      { body = "BREAKING CHANGE:"                          , group = "<!-- 0 --> :boom: Breaking"},

      # Non-conventional
      { message = "^minor", skip = true},
      { message = "^style", skip = true},
      { message = "^([Cc]leanup|[Cc]onsisten|[Tt]ypo)", skip = true},
      { message = "^tool", skip = true}, # Commits related to tools like git-cliff, Makefile, etc.
      { message = "^[Cc]heckdoc [Ff]ixes$", skip = true}, # Commits to make emacs-lisp checkdoc pass.
      { message = "^[Pp]ass [Cc]heckdoc$", skip = true}, # Commits to make emacs-lisp checkdoc pass.
      { message = "([Bb]reaking|BREAKING|[Nn]otice|NOTICE)", group = "<!-- 0 --> :boom: Breaking"},
      { message = "^PR #"                                  , group = "<!-- 1.1 --> :rocket: PR Merges"},
      { message = "Fixes Issue #"                          , group = "<!-- 1.2 --> :white_check_mark: Issue Fixes"},
      { message = "^([Pp]erf|[Ss]peed|[Oo]ptimiz|[Ii]mprov)", group = "<!-- 2 --> :zap: Performance"},
      { message = "^[Ff]ix"                                , group = "<!-- 3 --> :bug: Bug Fixes"},
      { message = "^[Dd]oc"                                , group = "<!-- 4.0 --> :memo: Documentation"},
      { message = "update .*[Dd]oc"                        , group = "<!-- 4.0 --> :memo: Documentation"},
      { message = "([Rr]efactor|[Rr]ename|[Ss]implify|[Cc]leanup)", group = "<!-- 5 --> :recycle: Refactor"},
      { message = "([Tt]ravis|gha|GHA)", skip = true},
      { message = "^[Aa]dd"                                , group = "<!-- 1.0 --> :sparkles: Features"},

      # All other commits
      { message = ".*", group = "<!-- 7 --> :bento: Other"},
  ]
  # filter out the commits that are not matched by commit parsers
  filter_commits = false
  # glob pattern for matching git tags
  tag_pattern = "v[0-9]*"
  # regex for skipping tags
  # skip_tags = "v0.1.0-beta.1"
  # regex for ignoring tags
  # ignore_tags = ""
  # sort the tags chronologically
  date_order = true
  # sort the commits inside sections by oldest/newest order
  sort_commits = "oldest"

# Emoji ideas: https://gitmoji.dev/
